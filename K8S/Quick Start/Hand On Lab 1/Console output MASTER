#START KUBEADMIN WITH CIDR CONFIGURED FOR FLANNEL NETWORK OVERLAY

[root@k8smaster cloud_user]# kubeadm init --pod-network-cidr=10.244.0.0/16
W0925 13:35:48.520375    9351 configset.go:348] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
[init] Using Kubernetes version: v1.19.2
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [k8smaster kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.1.100]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [k8smaster localhost] and IPs [10.0.1.100 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [k8smaster localhost] and IPs [10.0.1.100 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 10.504087 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.19" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node k8smaster as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node k8smaster as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: 1c7jet.q5a16imbhaiqxql2
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.1.100:6443 --token 1c7jet.q5a16imbhaiqxql2 \
    --discovery-token-ca-cert-hash sha256:e8cd78dc1682db48a9749876b8b185fa426ed92b98100c0ddd264fb2aaa370af 

[root@k8smaster cloud_user]# exit

##############################
JOIN NODES [!] BEFORE CONTINUE
##############################

[cloud_user@k8smaster ~]$ mkdir -p $HOME/.kube
[cloud_user@k8smaster ~]$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
[sudo] password for cloud_user: 
[cloud_user@k8smaster ~]$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

[cloud_user@k8smaster ~]$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
podsecuritypolicy.policy/psp.flannel.unprivileged created
Warning: rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole
clusterrole.rbac.authorization.k8s.io/flannel created
Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds created
[cloud_user@k8smaster ~]$ 

>> Get pods status !

[cloud_user@k8smaster ~]$ kubectl get pods --all-namespaces
NAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE
kube-system   coredns-f9fd979d6-hkwzs             0/1     Running   0          11m
kube-system   coredns-f9fd979d6-s2g9k             0/1     Running   0          11m
kube-system   etcd-k8smaster                      1/1     Running   0          12m
kube-system   kube-apiserver-k8smaster            1/1     Running   0          12m
kube-system   kube-controller-manager-k8smaster   1/1     Running   0          12m
kube-system   kube-flannel-ds-fkksz               1/1     Running   0          27s
kube-system   kube-flannel-ds-gzh6k               1/1     Running   0          27s
kube-system   kube-flannel-ds-h7cg8               1/1     Running   0          27s
kube-system   kube-proxy-2z7vx                    1/1     Running   0          11m
kube-system   kube-proxy-xt5g9                    1/1     Running   0          3m25s
kube-system   kube-proxy-zmdzj                    1/1     Running   0          3m28s
kube-system   kube-scheduler-k8smaster            1/1     Running   0          12m
[cloud_user@k8smaster ~]$ 

>> Get nodes status !

[cloud_user@k8smaster ~]$ kubectl get nodes
NAME        STATUS   ROLES    AGE     VERSION
k8smaster   Ready    master   13m     v1.19.2
k8snode1    Ready    <none>   4m29s   v1.19.2
k8snode2    Ready    <none>   4m26s   v1.19.2
[cloud_user@k8smaster ~]$ 

>> Create deployment

[cloud_user@k8smaster ~]$ kubectl create deployment nginx --image=nginx
deployment.apps/nginx created
[cloud_user@k8smaster ~]$ kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
nginx-6799fc88d8-xr2dz   1/1     Running   0          12s
[cloud_user@k8smaster ~]$ 

>> Raise replicas

[cloud_user@k8smaster ~]$ kubectl scale deployment nginx --replicas=4
deployment.apps/nginx scaled
[cloud_user@k8smaster ~]$ kubectl get pods
NAME                     READY   STATUS              RESTARTS   AGE
nginx-6799fc88d8-8jxzn   1/1     Running             0          2s
nginx-6799fc88d8-s785r   0/1     ContainerCreating   0          3s
nginx-6799fc88d8-w4djq   0/1     ContainerCreating   0          2s
nginx-6799fc88d8-xr2dz   1/1     Running             0          60s
[cloud_user@k8smaster ~]$ 

[cloud_user@k8smaster ~]$ kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
nginx-6799fc88d8-8jxzn   1/1     Running   0          18s
nginx-6799fc88d8-s785r   1/1     Running   0          19s
nginx-6799fc88d8-w4djq   1/1     Running   0          18s
nginx-6799fc88d8-xr2dz   1/1     Running   0          76s
[cloud_user@k8smaster ~]$ 

# EXTRA INFORMATION

[cloud_user@k8smaster ~]$ kubectl describe deployment nginx
Name:                   nginx
Namespace:              default
CreationTimestamp:      Fri, 25 Sep 2020 13:50:20 -0400
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=nginx
Replicas:               4 desired | 4 updated | 4 total | 4 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-6799fc88d8 (4/4 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  2m52s  deployment-controller  Scaled up replica set nginx-6799fc88d8 to 1
  Normal  ScalingReplicaSet  115s   deployment-controller  Scaled up replica set nginx-6799fc88d8 to 4
[cloud_user@k8smaster ~]$ 

